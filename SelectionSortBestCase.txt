public class SelectionSortBestCase {

  public static void selectionSort(double[] list) {
      for (int i = 0; i < list.length - 1; i++) {
          // Find the minimum in the list[i..list.length-1]
          double currentMin = list[i];
          int currentMinIndex = i;

          for (int j = i + 1; j < list.length; j++) {
              if (currentMin > list[j]) {
                  currentMin = list[j];
                  currentMinIndex = j;
              }
          }

          // Swap list[i] with list[currentMinIndex] if necessary
          if (currentMinIndex != i) {
              list[currentMinIndex] = list[i];
              list[i] = currentMin;
          }
      }
  }

  public static void main(String[] args) {
      final int N = 100;
      double[] list = generateSortedArray(N); // Generate a sorted array

      long startTime = System.nanoTime(); // Start the timing
      selectionSort(list); // Sort the array
      long endTime = System.nanoTime(); // End the timing

      System.out.println("Best Case Time (nanoseconds): " + (endTime - startTime));
  }

  private static double[] generateSortedArray(int size) {
      double[] array = new double[size];
      for (int i = 0; i < size; i++) {
          array[i] = i; // Fill the array with sorted values
      }
      return array;
  }
}
